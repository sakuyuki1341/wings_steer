/// 操舵の完成版(ver.0.1.0)
/****************************************************
 * マクロ部
 ****************************************************/
#include <string.h>
#include <MsTimer2.h>
#include <EEPROM.h>

//ピン設定
#define PIN_X 0
#define PIN_Y 1
#define PIN_SW 10

//サーボの設定
#define MAX_ANGLE_ADDRESS 0    //EEPROMにおけるmax_angleのアドレス
/****************************************************
 * 構造体宣言部
 ****************************************************/
//アナログスティックの状態を保存する構造体
typedef struct analog_stick {
    int x;  //x軸の値 0~1023
    int y;  //y軸の値 0~1024
    int sw; //スイッチの状態 0:オフ　1:オン
} analog_stick;

/****************************************************
 * プロトタイプ宣言部
 ****************************************************/
//---surbo_ver.0.1.0内で定義--------------------------
void move_surbo(int max_angle);
int calc_angle(int analog_num, int max_angle);
//---------------------------------------------------

//---command_line_ver.0.1.0内で定義-------------------
void cmdline();
//---------------------------------------------------

/****************************************************
 * グローバル変数/配列 宣言部
 ****************************************************/
//ピン設定
const int EnPin = 2;    //送受信切替

//---EEPROMに保存しているもの---------------------------
//サーボの片方向への最大動作角度
int max_angle;


/****************************************************
 * Arduino 要求関数部
 ****************************************************/
void setup() {
    //サーボ用初期設定
    Serial.begin(115200, SERIAL_8E1);   //UARTの通信設定
    pinMode(PIN_SW, INPUT_PULLUP);
    pinMode(EnPin, OUTPUT);             //送受信切替ピンの設定
    digitalWrite(EnPin, LOW);           //常に受信モードにしておく

    //EEPROMの初期設定
    max_angle = EEPROM.read(MAX_ANGLE_ADDRESS);

    //コマンド用初期設定
    //MsTimer2::set(1, move_surbo(max_angle));
    //MsTimer2::start();
}

void loop() {
    //cmdline();
    move_surbo(max_angle);
}

/****************************************************
 * 独自関数部
 ****************************************************/
